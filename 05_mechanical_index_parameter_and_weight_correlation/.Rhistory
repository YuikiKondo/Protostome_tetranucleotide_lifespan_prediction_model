for (col in mech_cols) {
p <- plot_one(col)
ggsave(
filename = file.path(outdir, paste0("scatter_", col, "_vs_AverageWeight.png")),
plot = p, width = 6, height = 5, dpi = 300
)
}
# Also save a table of Spearman results
summ <- lapply(mech_cols, function(col) {
ct <- suppressWarnings(cor.test(df$Average_Weight_Tetranuc, df[[col]], method = "spearman", exact = FALSE))
tibble(Index = col, Spearman_rho = unname(ct$estimate), p_value = ct$p.value)
}) |> bind_rows()
write.csv(summ, file.path(outdir, "spearman_summary.csv"), row.names = FALSE)
message("Saved ", length(mech_cols), " plots and spearman_summary.csv in: ", outdir)
# =======================
# Setup
# =======================
setwd("/Users/yuikikondo/Desktop/Github_code/protostome_lifespan_prediction_model/13_mechanical_index_weight_correlation")
# =======================
library(readr)
library(dplyr)
library(ggplot2)
df <- read_csv("tetranucleotide_mechanics_full_zscore_with_weights.csv")
# Mechanics columns: keep *_z, drop motif & weight
exclude_cols <- c("Motif", "Average_Weight_Tetranuc")
mech_cols <- names(df)
mech_cols <- mech_cols[grepl("_z$", mech_cols) & !(mech_cols %in% exclude_cols)]
outdir <- "mechanics_scatterplots_fdr"
dir.create(outdir, showWarnings = FALSE)
# =======================
# 1) Spearman tests (raw p)
# =======================
spearman_results <- lapply(mech_cols, function(col) {
ct <- suppressWarnings(cor.test(df$Average_Weight_Tetranuc, df[[col]],
method = "spearman", exact = FALSE))
tibble(
Index = col,
Spearman_rho = unname(ct$estimate),
p_value = ct$p.value
)
}) %>% bind_rows()
# =======================
# 2) FDR correction (BH)
# =======================
spearman_results <- spearman_results %>%
mutate(q_value = p.adjust(p_value, method = "BH"))  # FDR
# Save summary table
write.csv(spearman_results, file.path(outdir, "spearman_fdr_summary.csv"), row.names = FALSE)
# Maps for annotation
rho_map <- setNames(spearman_results$Spearman_rho, spearman_results$Index)
q_map   <- setNames(spearman_results$q_value,      spearman_results$Index)
# Helper to make annotation label (avoid Unicode parse issues)
spearman_fdr_label <- function(idx) {
paste0(
"Spearman's rho = ", sprintf("%.3f", rho_map[[idx]]),
"\nFDR q = ", format.pval(q_map[[idx]], digits = 2, eps = 1e-3)
)
}
# =======================
# 3) Plot function (LM line + Spearman rho & FDR q)
# =======================
plot_one <- function(ycol) {
lab <- spearman_fdr_label(ycol)
ggplot(df, aes(x = Average_Weight_Tetranuc, y = .data[[ycol]])) +
geom_point(alpha = 0.7, size = 2) +
geom_smooth(method = "lm", se = FALSE, linetype = "dashed", color = "red") +
annotate("text", x = Inf, y = Inf, label = lab, hjust = 1.05, vjust = 1.2, size = 4) +
labs(
x = "Average Weight (per Tetranucleotide)",
y = paste0(ycol, " (z-score)"),
title = paste("Scatterplot:", ycol, "vs Average Weight")
) +
theme_minimal(base_size = 14)
}
# =======================
# 4) Generate & save plots
# =======================
for (col in mech_cols) {
p <- plot_one(col)
ggsave(
filename = file.path(outdir, paste0("scatter_", col, "_vs_AverageWeight_FDR.png")),
plot = p, width = 6, height = 5, dpi = 300
)
}
message("✅ Saved ", length(mech_cols), " plots and spearman_fdr_summary.csv in: ", outdir)
# =======================
# Setup
# =======================
setwd("/Users/yuikikondo/Desktop/Github_code/protostome_lifespan_prediction_model/13_mechanical_index_weight_correlation")
# =======================
library(readr)
library(dplyr)
library(ggplot2)
df <- read_csv("tetranucleotide_mechanics_full_zscore_with_weights.csv")
stopifnot("Average_Weight_Tetranuc" %in% names(df))
# Mechanics columns: keep *_z, drop motif & weight, and ensure numeric
exclude_cols <- c("Motif", "Average_Weight_Tetranuc")
mech_cols <- names(df)
mech_cols <- mech_cols[grepl("_z$", mech_cols) & !(mech_cols %in% exclude_cols)]
mech_cols <- mech_cols[sapply(df[mech_cols], is.numeric)]
outdir <- "mechanics_scatterplots_fdr"
dir.create(outdir, showWarnings = FALSE)
# =======================
# Helpers
# =======================
spearman_test <- function(x, y) {
idx <- stats::complete.cases(x, y)
x2 <- x[idx]; y2 <- y[idx]
if (length(x2) < 3L) return(list(rho = NA_real_, p = NA_real_))
ct <- suppressWarnings(cor.test(x2, y2, method = "spearman", exact = FALSE))
list(rho = unname(ct$estimate), p = ct$p.value)
}
fmt_num <- function(x) ifelse(is.na(x), "NA", sprintf("%.3f", x))
fmt_p   <- function(p) ifelse(is.na(p), "NA", format.pval(p, digits = 2, eps = 1e-3))
# =======================
# 1) Compute Spearman + FDR
# =======================
spearman_results <- lapply(mech_cols, function(col) {
st <- spearman_test(df$Average_Weight_Tetranuc, df[[col]])
tibble(Index = col, Spearman_rho = st$rho, p_value = st$p)
}) %>% bind_rows()
spearman_results <- spearman_results %>%
mutate(p_value_FDR_corrected = p.adjust(p_value, method = "BH"))
# Save summary table
write.csv(spearman_results,
file.path(outdir, "spearman_p_and_FDR_summary.csv"),
row.names = FALSE)
# Named lookups for annotation
rho_map  <- setNames(spearman_results$Spearman_rho, spearman_results$Index)
p_map    <- setNames(spearman_results$p_value, spearman_results$Index)
pfdr_map <- setNames(spearman_results$p_value_FDR_corrected, spearman_results$Index)
make_label <- function(idx) {
paste0(
"Spearman's rho = ", fmt_num(rho_map[[idx]]),
"\n", "p-value = ", fmt_p(p_map[[idx]]),
"\n", "FDR-corrected p-value = ", fmt_p(pfdr_map[[idx]])
)
}
# =======================
# 2) Plot function (LM line + labels)
# =======================
plot_one <- function(ycol) {
lab <- make_label(ycol)
ggplot(df, aes(x = Average_Weight_Tetranuc, y = .data[[ycol]])) +
geom_point(alpha = 0.7, size = 2) +
geom_smooth(method = "lm", se = FALSE, linetype = "dashed", color = "red") +
annotate("text", x = Inf, y = Inf, label = lab,
hjust = 1.05, vjust = 1.2, size = 4) +
labs(
x = "Average Weight (per Tetranucleotide)",
y = paste0(ycol, " (z-score)"),
title = paste("Scatterplot:", ycol, "vs Average Weight")
) +
theme_minimal(base_size = 14)
}
# =======================
# 3) Generate & save plots
# =======================
for (col in mech_cols) {
p <- plot_one(col)
ggsave(
filename = file.path(outdir, paste0("scatter_", col, "_vs_AverageWeight_FDR.png")),
plot = p, width = 6, height = 5, dpi = 300
)
}
message("✅ Saved ", length(mech_cols), " plots and spearman_p_and_FDR_summary.csv in: ", outdir)
# =======================
# Setup
# =======================
setwd("/Users/yuikikondo/Desktop/Github_code/protostome_lifespan_prediction_model/13_mechanical_index_weight_correlation")
library(readr)
library(dplyr)
library(ggplot2)
df <- read_csv("tetranucleotide_mechanics_full_zscore_with_weights.csv")
stopifnot("Average_Weight_Tetranuc" %in% names(df))
# Mechanics columns: keep *_z, drop motif & weight, ensure numeric
exclude_cols <- c("Motif", "Average_Weight_Tetranuc")
mech_cols <- names(df)
mech_cols <- mech_cols[grepl("_z$", mech_cols) & !(mech_cols %in% exclude_cols)]
mech_cols <- mech_cols[sapply(df[mech_cols], is.numeric)]
outdir <- "mechanics_scatterplots_fdr"
dir.create(outdir, showWarnings = FALSE)
# =======================
# Helpers
# =======================
spearman_test <- function(x, y) {
idx <- stats::complete.cases(x, y)
x2 <- x[idx]; y2 <- y[idx]
if (length(x2) < 3L) return(list(rho = NA_real_, p = NA_real_))
ct <- suppressWarnings(cor.test(x2, y2, method = "spearman", exact = FALSE))
list(rho = unname(ct$estimate), p = ct$p.value)
}
fmt_num <- function(x) ifelse(is.na(x), "NA", sprintf("%.3f", x))
fmt_p   <- function(p) ifelse(is.na(p), "NA", format.pval(p, digits = 2, eps = 1e-3))
# Convert "A_philicity_energy_z" -> "A philicity energy (Z-scored)"
pretty_mech_label <- function(colname) {
base <- sub("_z$", "", colname)      # drop trailing _z
pretty <- gsub("_", " ", base)       # underscores -> spaces (keep original caps)
paste0(pretty, " (Z-scored)")
}
# =======================
# 1) Compute Spearman + FDR
# =======================
spearman_results <- lapply(mech_cols, function(col) {
st <- spearman_test(df$Average_Weight_Tetranuc, df[[col]])
tibble(Index = col, Spearman_rho = st$rho, p_value = st$p)
}) %>% bind_rows()
spearman_results <- spearman_results %>%
mutate(p_value_FDR_corrected = p.adjust(p_value, method = "BH"))
write.csv(
spearman_results,
file.path(outdir, "spearman_p_and_FDR_summary.csv"),
row.names = FALSE
)
# Named lookups for annotation
rho_map  <- setNames(spearman_results$Spearman_rho, spearman_results$Index)
p_map    <- setNames(spearman_results$p_value, spearman_results$Index)
pfdr_map <- setNames(spearman_results$p_value_FDR_corrected, spearman_results$Index)
make_label <- function(idx) {
paste0(
"Spearman's rho = ", fmt_num(rho_map[[idx]]),
"\n", "p-value = ", fmt_p(p_map[[idx]]),
"\n", "FDR-corrected p-value = ", fmt_p(pfdr_map[[idx]])
)
}
# =======================
# 2) Plot function (no main title; custom axis titles)
# =======================
plot_one <- function(ycol) {
lab <- make_label(ycol)
ggplot(df, aes(x = Average_Weight_Tetranuc, y = .data[[ycol]])) +
geom_point(alpha = 0.7, size = 2) +
geom_smooth(method = "lm", se = FALSE, linetype = "dashed", color = "red") +
annotate("text", x = Inf, y = Inf, label = lab,
hjust = 1.05, vjust = 1.2, size = 4) +
labs(
x = "Average weight across regions",
y = pretty_mech_label(ycol)
# no title
) +
theme_minimal(base_size = 14) +
theme(plot.title = element_blank())
}
# =======================
# 3) Generate & save plots
# =======================
for (col in mech_cols) {
p <- plot_one(col)
ggsave(
filename = file.path(outdir, paste0("scatter_", col, "_vs_AverageWeight_FDR.png")),
plot = p, width = 6, height = 5, dpi = 300
)
}
message("✅ Saved ", length(mech_cols), " plots and spearman_p_and_FDR_summary.csv in: ", outdir)
# =======================
# Setup
# =======================
setwd("/Users/yuikikondo/Desktop/Github_code/protostome_lifespan_prediction_model/13_mechanical_index_weight_correlation")
library(readr)
library(dplyr)
library(ggplot2)
library(stringr)
# Use the by-region file you generated with Python
infile <- "tetranucleotide_mechanics_full_zscore_with_weights_by_region.csv"
if (!file.exists(infile)) {
# fallback if you still have the older filename
infile <- "tetranucleotide_mechanics_full_zscore_with_weights.csv"
}
df <- read_csv(infile)
stopifnot("Motif" %in% names(df))
# =======================
# Columns
# =======================
# Mechanics columns: keep *_z, drop motif & any weight columns; ensure numeric
weight_cols_all <- grep("^Average_Weight_", names(df), value = TRUE)
exclude_cols <- c("Motif", weight_cols_all)
mech_cols <- setdiff(names(df), exclude_cols)
mech_cols <- mech_cols[grepl("_z$", mech_cols)]
mech_cols <- mech_cols[sapply(df[mech_cols], is.numeric)]
# Region weight columns (exclude across-regions if present)
region_cols <- setdiff(weight_cols_all, "Average_Weight_Tetranuc")
stopifnot(length(region_cols) > 0)
# Output root
outroot <- "mechanics_scatterplots_fdr_by_region"
dir.create(outroot, showWarnings = FALSE)
# =======================
# Helpers
# =======================
spearman_test <- function(x, y) {
ok <- stats::complete.cases(x, y)
x2 <- x[ok]; y2 <- y[ok]
if (length(x2) < 3L) return(list(rho = NA_real_, p = NA_real_))
ct <- suppressWarnings(cor.test(x2, y2, method = "spearman", exact = FALSE))
list(rho = unname(ct$estimate), p = ct$p.value)
}
fmt_num <- function(x) ifelse(is.na(x), "NA", sprintf("%.3f", x))
fmt_p   <- function(p) ifelse(is.na(p), "NA", format.pval(p, digits = 2, eps = 1e-3))
# "A_philicity_energy_z" -> "A philicity energy (Z-scored)"
pretty_mech_label <- function(colname) {
base <- sub("_z$", "", colname)
pretty <- gsub("_", " ", base)
paste0(pretty, " (Z-scored)")
}
# "Average_Weight_upstream2" -> "upstream2"
region_key <- function(col) sub("^Average_Weight_", "", col)
# "upstream2" -> "Upstream 2", "downstream2" -> "Downstream 2", "exon" -> "Exon", etc.
pretty_region <- function(reg) {
if (grepl("^(upstream|downstream)\\d+$", reg)) {
caps <- tools::toTitleCase(sub("(\\d+)$", " \\1", reg))
return(caps)
}
tools::toTitleCase(reg)
}
make_label_fun <- function(rho, p_raw, p_fdr) {
paste0(
"Spearman's rho = ", fmt_num(rho),
"\n", "p-value = ", fmt_p(p_raw),
"\n", "FDR-corrected p-value = ", fmt_p(p_fdr)
)
}
# =======================
# Main loop per region
# =======================
all_region_summaries <- list()
for (rc in region_cols) {
reg <- region_key(rc)
reg_pretty <- pretty_region(reg)
# 1) Spearman tests for this region across all mechanics
results <- lapply(mech_cols, function(col) {
st <- spearman_test(df[[rc]], df[[col]])
tibble(
Region = reg,
Index = col,
Spearman_rho = st$rho,
p_value = st$p
)
}) %>% bind_rows() %>%
mutate(p_value_FDR_corrected = p.adjust(p_value, method = "BH"))
# Save summary CSV for this region
outdir <- file.path(outroot, reg)
dir.create(outdir, showWarnings = FALSE, recursive = TRUE)
write.csv(results, file.path(outdir, paste0("spearman_p_and_FDR_summary_", reg, ".csv")), row.names = FALSE)
# Named lookups for annotation
rho_map  <- setNames(results$Spearman_rho, results$Index)
p_map    <- setNames(results$p_value, results$Index)
pfdr_map <- setNames(results$p_value_FDR_corrected, results$Index)
# 2) Plot function for this region
plot_one <- function(ycol) {
lab <- make_label_fun(rho_map[[ycol]], p_map[[ycol]], pfdr_map[[ycol]])
ggplot(df, aes(x = .data[[rc]], y = .data[[ycol]])) +
geom_point(alpha = 0.7, size = 2) +
geom_smooth(method = "lm", se = FALSE, linetype = "dashed", color = "red") +
annotate("text", x = Inf, y = Inf, label = lab,
hjust = 1.05, vjust = 1.2, size = 4) +
labs(
x = paste0("Average weight in ", reg_pretty),
y = pretty_mech_label(ycol)
) +
theme_minimal(base_size = 14) +
theme(plot.title = element_blank())
}
# 3) Generate & save plots for this region
for (col in mech_cols) {
p <- plot_one(col)
ggsave(
filename = file.path(outdir, paste0("scatter_", reg, "_", col, "_vs_AverageWeight_FDR.png")),
plot = p, width = 6, height = 5, dpi = 300
)
}
all_region_summaries[[reg]] <- results
}
# Also save a combined summary over all regions
bind_rows(all_region_summaries) %>%
arrange(Region, Index) %>%
write.csv(file.path(outroot, "spearman_p_and_FDR_summary_ALL_REGIONS.csv"), row.names = FALSE)
message("✅ Done. Plots & CSVs saved under: ", outroot)
# =======================
# Setup
# =======================
setwd("/Users/yuikikondo/Desktop/Github_code/protostome_lifespan_prediction_model/13_mechanical_index_weight_correlation")
# =======================
# Setup
# =======================
setwd("/Users/yuikikondo/Desktop/Github_code/protostome_lifespan_prediction_model/13_mechanical_index_weight_correlation")
library(readr)
library(dplyr)
library(ggplot2)
library(tools)
# Input (by-region) produced by your Python step
infile <- "tetranucleotide_mechanics_full_zscore_with_weights_by_region.csv"
if (!file.exists(infile)) {
stop("Input file not found: tetranucleotide_mechanics_full_zscore_with_weights_by_region.csv")
}
df <- read_csv(infile, show_col_types = FALSE)
stopifnot("Motif" %in% names(df))
# =======================
# Identify columns
# =======================
# All weight columns (per-region)
weight_cols_all <- grep("^Average_Weight_", names(df), value = TRUE)
# Exclude the across-region mean if present
region_cols <- setdiff(weight_cols_all, "Average_Weight_Tetranuc")
if (length(region_cols) == 0) stop("No region-specific weight columns found.")
# Mechanics columns: *_z, numeric, and not weight columns
exclude_cols <- c("Motif", weight_cols_all)
mech_cols <- setdiff(names(df), exclude_cols)
mech_cols <- mech_cols[grepl("_z$", mech_cols)]
mech_cols <- mech_cols[sapply(df[mech_cols], is.numeric)]
if (length(mech_cols) == 0) stop("No mechanics *_z numeric columns found.")
# =======================
# Helpers
# =======================
spearman_test <- function(x, y) {
ok <- stats::complete.cases(x, y)
x2 <- x[ok]; y2 <- y[ok]
if (length(x2) < 3L) return(list(rho = NA_real_, p = NA_real_))
ct <- suppressWarnings(cor.test(x2, y2, method = "spearman", exact = FALSE))
list(rho = unname(ct$estimate), p = ct$p.value)
}
fmt_num <- function(x) ifelse(is.na(x), "NA", sprintf("%.3f", x))
fmt_p   <- function(p) ifelse(is.na(p), "NA", format.pval(p, digits = 2, eps = 1e-3))
# "A_philicity_energy_z" -> "A philicity energy (Z-scored)"
pretty_mech_label <- function(colname) {
base <- sub("_z$", "", colname)
pretty <- gsub("_", " ", base)
paste0(pretty, " (Z-scored)")
}
# Column name -> region key and pretty label
region_key <- function(col) sub("^Average_Weight_", "", col)
pretty_region <- function(reg) {
# upstream2 -> "Upstream 2", exon -> "Exon", genome -> "Genome"
if (grepl("^(upstream|downstream)\\d+$", reg)) {
return(toTitleCase(sub("(\\d+)$", " \\1", reg)))
}
toTitleCase(reg)
}
# =======================
# 1) Compute Spearman across ALL (index × region) tests
# =======================
results_list <- list()
for (rc in region_cols) {
reg <- region_key(rc)
for (idx in mech_cols) {
st <- spearman_test(df[[rc]], df[[idx]])
results_list[[length(results_list) + 1L]] <- tibble::tibble(
Region        = reg,
Weight_Column = rc,
Index         = idx,
Spearman_rho  = st$rho,
p_value       = st$p
)
}
}
all_results <- dplyr::bind_rows(results_list)
# =======================
# 2) Global FDR (BH) across ALL tests
# =======================
all_results <- all_results %>%
mutate(p_value_FDR_corrected_GLOBAL = p.adjust(p_value, method = "BH"))
# Save combined table
outroot <- "mechanics_scatterplots_fdr_by_region_GLOBAL"
dir.create(outroot, showWarnings = FALSE)
readr::write_csv(all_results,
file.path(outroot, "spearman_p_and_GLOBAL_FDR_summary_ALL_REGIONS.csv"))
# =======================
# 3) Plotting per region with GLOBAL FDR labels
# =======================
for (rc in unique(all_results$Weight_Column)) {
reg <- region_key(rc)
reg_pretty <- pretty_region(reg)
subres <- all_results %>% filter(Region == reg)
outdir <- file.path(outroot, reg)
dir.create(outdir, showWarnings = FALSE, recursive = TRUE)
# Lookups for annotation
rho_map  <- setNames(subres$Spearman_rho,               subres$Index)
p_map    <- setNames(subres$p_value,                    subres$Index)
pfdr_map <- setNames(subres$p_value_FDR_corrected_GLOBAL, subres$Index)
make_label <- function(idx) {
paste0(
"Spearman's rho = ", fmt_num(rho_map[[idx]]),
"\n", "p-value = ", fmt_p(p_map[[idx]]),
"\n", "FDR-corrected p-value (global) = ", fmt_p(pfdr_map[[idx]])
)
}
plot_one <- function(ycol) {
lab <- make_label(ycol)
ggplot(df, aes(x = .data[[rc]], y = .data[[ycol]])) +
geom_point(alpha = 0.7, size = 2) +
geom_smooth(method = "lm", se = FALSE, linetype = "dashed", color = "red") +
annotate("text", x = Inf, y = Inf, label = lab,
hjust = 1.05, vjust = 1.2, size = 4) +
labs(
x = paste0("Average weight in ", reg_pretty),
y = pretty_mech_label(ycol)
) +
theme_minimal(base_size = 14) +
theme(plot.title = element_blank())
}
# Save one plot per mechanics index for this region
for (idx in mech_cols) {
p <- plot_one(idx)
ggsave(
filename = file.path(outdir, paste0("scatter_", reg, "_", idx, "_vs_AverageWeight_GLOBALFDR.png")),
plot = p, width = 6, height = 5, dpi = 300
)
}
# Also save a region-specific CSV with GLOBAL FDR
readr::write_csv(subres,
file.path(outdir, paste0("spearman_p_and_GLOBAL_FDR_summary_", reg, ".csv")))
}
message("✅ Done. Global FDR applied across all (index × region) tests. ",
"Plots and CSVs in: ", outroot)
